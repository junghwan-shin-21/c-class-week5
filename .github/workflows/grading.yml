name: Grading Assignment Q-1

on: [push]

jobs:
  grade-assignment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Compile the code
        run: gcc main.c -o main 
        
      - name: Run Test Cases and Check Output
        id: code_test
        run: |
          # 1. 테스트 입력 시퀀스
          TEST_INPUT="21\n37\n45\n93\n0\n"

          # 2. 예상 출력 정의 (프롬프트와 마지막 입력 '0'을 모두 제거한 순수한 결과만 남김)
          EXPECTED_STATIC_OUTPUT_CONTENT="21: 비소수\n37: 소수\n45: 비소수\n93: 비소수\n===========\n종료\n소수 판별 횟수: 4회\n"
          
          # 3. 실제 코드 실행 및 출력 캡처
          ACTUAL_OUTPUT=$(echo -e "$TEST_INPUT" | ./main)
          echo "$ACTUAL_OUTPUT" > actual_output.txt

          # 4. 출력 후처리 (모든 '정수 입력: ' 프롬프트를 제거)
          PROCESSED_OUTPUT=$(echo "$ACTUAL_OUTPUT" | sed 's/정수 입력: //g' | sed 's/\r//g')
          
          # 5. 출력 비교 로직 초기화
          TEST_RESULT="fail"
          GRADING_RESULT="output_fail" # 기본 실패 사유: 프로그램 출력 문제
          EXEC_TIME_PATTERN="실행시간: [0-9]+\.[0-9]{6}초"

          # 5.1. 처리된 출력에서 정적 부분만 추출 (head -n 7)
          ACTUAL_STATIC_LINES=$(echo "$PROCESSED_OUTPUT" | head -n 7)
          
          # 5.2. 파일로 저장 (EOF 일치)
          echo -n "$ACTUAL_STATIC_LINES" > actual_static_output.txt
          echo -n -e "$EXPECTED_STATIC_OUTPUT_CONTENT" > expected_static_output.txt

          # 5.3. diff 비교
          if diff -qaw expected_static_output.txt actual_static_output.txt; then
            
            # diff 성공 시, 마지막 실행시간 형식만 검사
            if echo "$ACTUAL_OUTPUT" | tail -n 1 | grep -E "$EXEC_TIME_PATTERN"; then
              TEST_RESULT="success"
              GRADING_RESULT="success" # 최종 성공
            fi
            
          else
            echo "::error::❌ Test Failed: Output Mismatch (diff check failed)."
            echo "--- Diff Output ---"
            diff expected_static_output.txt actual_static_output.txt
            echo "-------------------"
            # GRADING_RESULT는 이미 "output_fail"로 설정되어 있음
          fi

          # 6. 🚨 주석 개수 검사 (Fail-Fast Overwrite)
          MIN_COMMENTS=4
          # //, /*, */ 등의 주석 마커가 포함된 모든 줄을 계산합니다.
          CURRENT_COMMENTS=$(grep -c -E '//|/\*|\*/' main.c)

          if [ "$CURRENT_COMMENTS" -lt "$MIN_COMMENTS" ]; then
            TEST_RESULT="fail" # 출력 비교 성공 여부와 관계없이 최종 실패
            GRADING_RESULT="comment_fail" # 최종 실패 사유: 주석 부족
            echo "::warning::⚠️ Code structure check failed: Comments too few ($CURRENT_COMMENTS / $MIN_COMMENTS)"
          fi
          
          # 최종 결과 설정
          echo "result=$TEST_RESULT" >> $GITHUB_OUTPUT
          echo "grading_result=$GRADING_RESULT" >> $GITHUB_OUTPUT # 상세 사유 전달
          echo "Test result: $TEST_RESULT"


      # ----------------------------------------------------
      # 최종 Fail 보장 및 사유 보고 로직
      - name: Final Grading and Failure Trigger
        run: |
          GRADING_RESULT="${{ steps.code_test.outputs.grading_result }}"
          
          if [ "$GRADING_RESULT" == "success" ]; then
            echo "::notice::✔ 최종 채점 통과"
          else
            echo "::error::❌ 최종 채점 실패"
            
            if [ "$GRADING_RESULT" == "comment_fail" ]; then
              echo "::error::🚨 실패 사유: 주석 부족 (main.c 파일에 최소 4개의 주석이 필요합니다.)"
            elif [ "$GRADING_RESULT" == "output_fail" ]; then
              echo "::error::🚨 실패 사유: 프로그램 동작/출력 불일치 (결과 값이 예상과 다릅니다.)"
            fi
            
            exit 1 
          fi
