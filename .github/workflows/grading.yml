name: Grading Assignment Q-1

on: [push]

jobs:
  grade-assignment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Compile the code
        run: gcc main.c -o main 
        # 컴파일 실패 시 즉시 Fail 처리됩니다.

      - name: Run Test Cases and Check Output
        id: code_test
        run: |
          # ----------------------------------------------------
          # 1. 새로운 테스트 입력 시퀀스 정의 (21, 37, 45, 93, 0)
          TEST_INPUT="21\n37\n45\n93\n0\n"
          
          # 2. 새로운 예상 출력 정의 (총 4회 판별)
          EXPECTED_OUTPUT=$(cat <<EOF
정수 입력: 21
21: 비소수
정수 입력: 37
37: 소수
정수 입력: 45
45: 비소수
정수 입력: 93
93: 비소수
정수 입력: 0
===========
종료
소수 판별 횟수: 4회
실행시간: 
EOF
          )

          # 3. 코드 실행 및 출력 캡처
          ACTUAL_OUTPUT=$(echo -e "$TEST_INPUT" | ./main)
          echo "$ACTUAL_OUTPUT" > actual_output.txt

          # 4. 출력 비교 로직 (이전과 동일하게 출력 불일치 최소화 로직 사용)
          
          # 4.1. 정규식 패턴 정의 (실행시간 부분 유연하게 처리)
          EXEC_TIME_PATTERN="실행시간: [0-9]+\.[0-9]{6}초"

          # 4.2. 예상 출력에서 실행시간 라인 제외 후 비교를 위한 텍스트 추출
          EXPECTED_STATIC_LINES=$(echo "$EXPECTED_OUTPUT" | head -n -1)
          
          # 4.3. 실제 출력에서 실행시간 라인 제외 후 횟수/결과 일치 검사
          ACTUAL_STATIC_LINES=$(cat actual_output.txt | head -n -1)
          
          if [ "$ACTUAL_STATIC_LINES" = "$EXPECTED_STATIC_LINES" ]; then
            
            # 4.4. 횟수/결과 일치 시, 실행시간 형식 검사
            if tail -n 1 actual_output.txt | grep -E "$EXEC_TIME_PATTERN"; then
              echo "::set-output name=result::success"
              echo "✅ Test Passed: Output and logic are correct."
            else
              echo "::set-output name=result::fail"
              echo "::error::❌ Test Failed: Execution time format is incorrect or missing."
              echo "Expected format: 실행시간: 0.000000초"
            fi
            
          else
            echo "::set-output name=result::fail"
            echo "::error::❌ Test Failed: Output Mismatch."
            echo "--- Expected Static Lines ---"
            echo "$EXPECTED_STATIC_LINES"
            echo "--- Actual Static Lines ---"
            echo "$ACTUAL_STATIC_LINES"
            echo "---------------------------"
          fi
          echo "Test result: ${{ steps.code_test.outputs.result }}"

      # ----------------------------------------------------
      # 최종 Fail 보장 로직 (가장 중요)
      - name: Final Grading and Failure Trigger
        run: |
          code_result="${{ steps.code_test.outputs.result }}"

          if [ "$code_result" == "success" ]; then
            echo "::notice::✔ 최종 채점 통과"
          else
            echo "::error::❌ 최종 채점 실패"
            exit 1 
          fi
